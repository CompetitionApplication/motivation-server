<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.mapper.app.ShoppingMapper">

    <select id="selectGoodsForNew" resultType="ShoppingGoodsDto">
        /* ShoppingMapper.selectGoodsForNew */
        WITH tb_temp AS (select c.code as code
                           from user_badge a
                      left join tourism_api b
                             on a.tourism_api_id = b.tourism_api_id
                            and b.country = #{language}
                      left join area_code c
                             on b.areacode = c.code
                            and c.country = #{language}
                      left join user d
                             on a.user_id = d.user_id
                          where a.user_id = #{userId}
        )
        select a.goods_id as goodsId
             , a.goods_name as goodsName
             , a.goods_price as goodsPrice
             , e.file_url as fileUrl
             , a.badge_open_count as badgeOpenCount
             , case when a.badge_open_count <![CDATA[<=]]> count(c.code) then 'Y'
                    else 'N'
                end as goodsOpenYn
         from goods a
    left join area_code b
           on a.area_code_id = b.area_code_id
          and b.country = #{language}
    left join tb_temp c
           on b.code = c.code
    left join file_group d
           on a.file_group_id = d.file_group_id
    left join file e
           on d.file_group_id = e.file_group_id
        where a.reg_datetime >= date_sub(now(), interval 1 month)
          and a.del_yn = 'N'
     group by a.goods_id
            , a.goods_name
            , a.goods_price
            , e.file_url
            , a.badge_open_count
    </select>

    <select id="selectGoodsForMz" resultType="ShoppingGoodsDto">
        /* ShoppingMapper.selectGoodsForMz */
        select a.goodsId
             , a.goodsName
             , a.goodsPrice
             , a.fileUrl
             , case when a.badgeOpenCount <![CDATA[<]]> a.badgeCollectCnt then 'Y'
                    else 'N'
                end as goodsOpenYn
         from (select a.goodsId
                    , a.goodsName
                    , a.goodsPrice
                    , a.fileUrl
                    , a.badgeOpenCount
                    , a.badgeCollectCnt
                    , row_number() over (order by score) as rn
                 from (WITH tb_temp AS (select c.code as code
                                          from user_badge a
                                     left join tourism_api b
                                            on a.tourism_api_id = b.tourism_api_id
                                           and b.country = #{language}
                                     left join area_code c
                                            on b.areacode = c.code
                                           and c.country = #{language}
                                     left join user d
                                            on a.user_id = d.user_id
                                         where a.user_id = #{userId}
                         )
                         select a.goods_id as goodsId
                              , a.goods_name as goodsName
                              , a.goods_price as goodsPrice
                              , i.file_url as fileUrl
                              , a.badge_open_count as badgeOpenCount
                              , count(c.code) as badgeCollectCnt
                              , count(distinct e.goods_visit_id) /1000 + count(distinct d.goods_buy_id) as score
                           from goods a
                      left join area_code b
                             on a.area_code_id = b.area_code_id
                            and b.country = #{language}
                      left join tb_temp c
                             on b.code = c.code
                      left join goods_buy d
                             on a.goods_id = d.goods_id
                      left join goods_visit e
                             on a.goods_id = e.goods_id
                      left join user f
                             on d.user_id = f.user_id
                      left join user g
                             on e.user_id = g.user_id
                      left join file_group h
                             on a.file_group_id = h.file_group_id
                      left join file i
                             on h.file_group_id = i.file_group_id
                          where f.user_age between 20 and 40
                            and g.user_age between 20 and 40
                       group by a.goods_id
                              , a.goods_name
                              , a.goods_price
                              , i.file_url
                              , a.badge_open_count
                       ) a
               )a
         where rn between 1 and 10
    </select>

    <select id="selectGoodsDetailByGoodsId" resultType="ShoppingGoodsDetailResDto">
        /* ShoppingMapper.selectGoodsDetailByGoodsId */
        select a.goods_id as goodsId
             , a.goods_name as goodsName
             , c.file_url as fileUrl
             , a.goods_from as goodsFrom
             , a.goods_release_date as goodsReleaseDate
             , a.goods_delivery_date as goodsDeliveryDate
             , a.goods_price as goodsPrice
             , '0%' as eventPercent
             , '0원' as eventPrice
             , '0%' as discountPercent
             , '0원' as discountPrice
          from goods a
     left join file_group b
            on b.file_group_id = a.file_group_id
     left join file c
            on c.file_group_id = b.file_group_id
         where a.goods_id = #{goodsId}
    </select>

    <insert id="insertGoodsVisit">
        /* ShoppingMapper.insertGoodsVisit */
        insert into goods_visit(
                    goods_visit_id
                  , goods_id
                  , user_id
          ) values (
                    UUID()
                  , #{goodsId}
                  , #{userId}
          )
    </insert>

    <select id="selectUserCartByGoodsIdAndUserId" resultType="UserCart">
        /* ShoppingMapper.selectUserCartByGoodsIdAndUserId */
        select *
          from user_cart
         where goods_id = #{goodsId}
           and user_id = #{userId}
    </select>

    <insert id="insertUserCart">
        /* ShoppingMapper.insertUserCart */
        insert into user_cart(
                    user_cart_id
                  , goods_id
                  , user_id
                  , del_yn
          ) values (
                    UUID()
                  , #{goodsId}
                  , #{userId}
                  , 'N'
          )
    </insert>

    <update id="updateUserCart">
        /* ShoppingMapper.updateUserCart */
        update user_cart
           set del_yn = #{delYn}
         where user_id = #{userId}
           and goods_id = #{goodsId}
    </update>

    <insert id="insertOrderItem">
        /* ShoppingMapper.insertOrderItem */
        insert into order_item(
                    order_item_id
                  , del_yn
                  , order_count
                  , order_price
                  , order_status
                  , goods_id
                  , user_id
                  , reg_datetime
           ) values (
                    UUID()
                  , 'N'
                  , #{orderCount}
                  , #{orderPrice}
                  , '결제완료'
                  , #{goodsId}
                  , #{userId}
                  , now()
           )
    </insert>

    <select id="selectGoodsByGoodsId">
        /* ShoppingMapper.selectGoodsByGoodsId */
        select goods_id as goodsId
          from goods
         where goods_id = #{goodsId}
    </select>
</mapper>








